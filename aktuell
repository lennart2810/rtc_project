# TODO
## slam verbessern:
- auflösung der Pixel minimal 
- aktualisierungsintervall schneller machen (öfter aktualisieren)
- laser-scan: 10° nehmen, um abstand nach vorne zu messen
- reduce_vel, deaktivieren, falls laser-scan nicht gut / konstant

## navigation:
- parameter tunen
- sonar besser einbinden, um niedrige Hindernisse zu umfahren (local costmap)
- sonar_to_costmap.py --> rtc_project
- pub_points_2_file.py anpassen (path_file über argumente in launch file)


## Sonar wieder ans laufen bekommen
## Twist Mux
## Restricted Area PlugIn

# AKTUELLEN Code ausführen:
https://github.com/lennart2810/rtc_project/blob/master/README.md


# Änderungen in den originalen Turtlebot3 - Files:

## slam

## navigation:
xy_goal_tolerance
yaw tolerance (dwa_local_planner_params_burger)
inflation_radius: 0.18 # was 1.0
oscillation_timeout
planner_frequency:

## costmap:
- wie in rtc von Just vorgeben
- openCR board, sonars eingfügt (Robotis und Just)

sudo ntpdate 192.168.1.111


update:

footprint anpassen --> breite auf 24cm
costen für enge kurven erhöhen --> cost_scaling_factor auf 3.0, inflation auf (cost_map_common_params)

navigation points über rviz oder realen turtle (in gazebo check)
beim realen: passt tf zur aktuellen position (mit map abgleichen)



# Resticted Area
anweisungen von just
rviz config mit toolpoperties gespeichert, damit man nicht immer erst size ändern muss um zu acitvieren

sonar mittelpunkt berechnen
auf turtlepose transferieren 
und als mouse_location publishen

roslaunch rtc_project advanced_navigation.launch points_via_robot:=true gazebo:=true map_file:=/home/lennart/catkin_ws/src/rtc_project/maps/house_map.yaml


